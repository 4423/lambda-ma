type token =
  | VAR of (string)
  | CON of (string)
  | STR of (string)
  | INT of (int)
  | ARROW
  | COLON
  | COMMA
  | DOT
  | ELSE
  | END
  | EOF
  | EQUAL
  | EQUALEQUAL
  | FUNCTION
  | FUNCTOR
  | GREATER
  | GREATEREQUAL
  | IF
  | IN
  | LESS
  | LESSEQUAL
  | LESSGREATER
  | LET
  | REC
  | LIDENT
  | LPAREN
  | MINUS
  | MODULE
  | PLUS
  | QUOTE
  | RPAREN
  | SEMICOLON
  | SEMISEMI
  | SIG
  | SLASH
  | STAR
  | STRUCT
  | THEN
  | TYPE
  | VALUE
  | MATCH
  | WITH
  | COLCOL
  | CONJ
  | BAR
  | DISJ
  | TRUE
  | FALSE
  | NOT
  | AND
  | MCOD
  | LMCOD
  | RMCOD
  | MESC
  | DOLLAR
  | MRUN
  | CODE
  | LCOD
  | RCOD
  | ESC
  | CSP
  | RUN
  | RECAPP

open Parsing;;
let _ = parse_error;;
# 8 "parser.mly"

open Identifier
open Source.Syntax
open Source.Syntax.Core

let rec typerepr = function
  | Var({repres = Some ty} as var) ->
      let r = typerepr ty in var.repres <- Some r; r
  | ty -> ty

let current_level = ref 0
let begin_def() = incr current_level
let end_def() = decr current_level
let newvar() = {repres = None; level = !current_level}

let generalize ty =
  let rec gen_vars vars ty =
      match typerepr ty with
      | Var v ->
          if v.level > !current_level && not (List.memq v vars)
          then v :: vars
          else vars
      | Typeconstr(path, tl) ->
          List.fold_left gen_vars vars tl in
  { quantif = gen_vars [] ty; body = ty }

let variables = ref ([] : (string * Core.type_variable) list)

let reset_type_variables () =
  variables := []

let find_type_variable name =
  try
    List.assoc name !variables
  with Not_found ->
    let v = newvar() in
    variables := (name, v) :: !variables;
    v

let binop op arg1 arg2 =
  Core.AppE(AppE(Longident(IdentP(Ident.create op)), arg1), arg2)

# 112 "parser.ml"
let yytransl_const = [|
  261 (* ARROW *);
  262 (* COLON *);
  263 (* COMMA *);
  264 (* DOT *);
  265 (* ELSE *);
  266 (* END *);
    0 (* EOF *);
  267 (* EQUAL *);
  268 (* EQUALEQUAL *);
  269 (* FUNCTION *);
  270 (* FUNCTOR *);
  271 (* GREATER *);
  272 (* GREATEREQUAL *);
  273 (* IF *);
  274 (* IN *);
  275 (* LESS *);
  276 (* LESSEQUAL *);
  277 (* LESSGREATER *);
  278 (* LET *);
  279 (* REC *);
  280 (* LIDENT *);
  281 (* LPAREN *);
  282 (* MINUS *);
  283 (* MODULE *);
  284 (* PLUS *);
  285 (* QUOTE *);
  286 (* RPAREN *);
  287 (* SEMICOLON *);
  288 (* SEMISEMI *);
  289 (* SIG *);
  290 (* SLASH *);
  291 (* STAR *);
  292 (* STRUCT *);
  293 (* THEN *);
  294 (* TYPE *);
  295 (* VALUE *);
  296 (* MATCH *);
  297 (* WITH *);
  298 (* COLCOL *);
  299 (* CONJ *);
  300 (* BAR *);
  301 (* DISJ *);
  302 (* TRUE *);
  303 (* FALSE *);
  304 (* NOT *);
  305 (* AND *);
  306 (* MCOD *);
  307 (* LMCOD *);
  308 (* RMCOD *);
  309 (* MESC *);
  310 (* DOLLAR *);
  311 (* MRUN *);
  312 (* CODE *);
  313 (* LCOD *);
  314 (* RCOD *);
  315 (* ESC *);
  316 (* CSP *);
  317 (* RUN *);
  318 (* RECAPP *);
    0|]

let yytransl_block = [|
  257 (* VAR *);
  258 (* CON *);
  259 (* STR *);
  260 (* INT *);
    0|]

let yylhs = "\255\255\
\004\000\004\000\005\000\005\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\007\000\
\007\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\008\000\008\000\009\000\009\000\011\000\
\012\000\012\000\012\000\013\000\013\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\015\000\
\015\000\016\000\017\000\018\000\020\000\019\000\019\000\019\000\
\022\000\022\000\021\000\023\000\023\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\025\000\025\000\027\000\027\000\027\000\027\000\027\000\028\000\
\028\000\026\000\026\000\026\000\026\000\026\000\026\000\029\000\
\029\000\031\000\031\000\031\000\030\000\032\000\032\000\034\000\
\034\000\033\000\033\000\033\000\033\000\033\000\033\000\002\000\
\002\000\003\000\001\000\000\000\000\000\000\000"

let yylen = "\002\000\
\001\000\003\000\001\000\003\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\004\000\005\000\006\000\006\000\004\000\001\000\
\002\000\001\000\001\000\001\000\001\000\001\000\003\000\002\000\
\002\000\003\000\003\000\002\000\002\000\003\000\001\000\003\000\
\003\000\003\000\001\000\003\000\001\000\002\000\003\000\003\000\
\001\000\002\000\004\000\002\000\002\000\003\000\003\000\001\000\
\003\000\002\000\001\000\002\000\004\000\000\000\001\000\003\000\
\001\000\003\000\002\000\001\000\001\000\001\000\003\000\008\000\
\004\000\003\000\003\000\003\000\002\000\006\000\003\000\004\000\
\000\000\003\000\003\000\004\000\002\000\006\000\004\000\000\000\
\001\000\001\000\003\000\008\000\002\000\003\000\003\000\000\000\
\003\000\003\000\002\000\004\000\002\000\000\000\003\000\000\000\
\001\000\005\000\006\000\004\000\003\000\004\000\002\000\002\000\
\001\000\002\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\102\000\000\000\001\000\000\000\000\000\081\000\
\000\000\000\000\000\000\000\000\116\000\000\000\000\000\113\000\
\000\000\000\000\000\000\117\000\000\000\118\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\115\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\085\000\063\000\112\000\114\000\000\000\000\000\000\000\
\000\000\000\000\074\000\071\000\000\000\076\000\000\000\000\000\
\002\000\079\000\000\000\000\000\096\000\000\000\000\000\000\000\
\000\000\000\000\083\000\000\000\000\000\000\000\065\000\000\000\
\067\000\000\000\000\000\000\000\000\000\000\000\111\000\105\000\
\103\000\000\000\089\000\082\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\093\000\073\000\037\000\003\000\028\000\
\027\000\000\000\000\000\000\000\000\000\000\000\029\000\030\000\
\000\000\000\000\000\000\000\000\026\000\000\000\000\000\024\000\
\084\000\000\000\000\000\000\000\064\000\000\000\109\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\095\000\
\091\000\000\000\000\000\000\000\000\000\000\000\094\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\032\000\033\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\
\000\000\066\000\000\000\000\000\000\000\000\000\049\000\000\000\
\110\000\000\000\000\000\000\000\000\000\078\000\000\000\000\000\
\000\000\069\000\000\000\068\000\099\000\000\000\097\000\101\000\
\000\000\000\000\000\000\000\000\035\000\000\000\031\000\004\000\
\034\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\046\000\000\000\000\000\000\000\000\000\052\000\000\000\
\050\000\000\000\000\000\000\000\000\000\000\000\000\000\059\000\
\098\000\000\000\000\000\000\000\000\000\000\000\045\000\000\000\
\000\000\039\000\000\000\043\000\055\000\000\000\000\000\054\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\051\000\000\000\000\000\000\000\044\000\000\000\000\000\000\000\
\041\000\000\000"

let yydgoto = "\004\000\
\013\000\020\000\022\000\108\000\109\000\110\000\111\000\067\000\
\233\000\112\000\234\000\235\000\236\000\168\000\209\000\225\000\
\226\000\178\000\041\000\042\000\043\000\072\000\181\000\015\000\
\026\000\063\000\021\000\084\000\090\000\135\000\133\000\023\000\
\049\000\081\000"

let yysindex = "\206\000\
\079\255\007\000\000\000\000\000\000\000\006\255\079\255\000\000\
\079\255\079\255\021\255\054\255\000\000\251\254\011\000\000\000\
\085\255\027\255\091\255\000\000\063\255\000\000\008\000\105\255\
\142\255\038\001\255\254\103\255\079\255\079\255\121\255\157\255\
\148\255\000\000\079\255\033\255\159\255\016\000\163\255\193\255\
\195\255\000\000\000\000\000\000\000\000\179\255\028\255\091\255\
\188\255\216\255\000\000\000\000\172\255\000\000\138\255\092\255\
\000\000\000\000\207\255\148\255\000\000\244\255\243\254\180\255\
\033\255\136\255\000\000\033\255\148\255\079\255\000\000\040\255\
\000\000\225\255\033\255\255\255\038\000\002\000\000\000\000\000\
\000\000\148\255\000\000\000\000\148\255\079\255\103\255\012\000\
\051\000\074\255\220\255\000\000\000\000\000\000\000\000\000\000\
\000\000\009\000\136\255\189\255\136\255\136\255\000\000\000\000\
\136\255\083\001\083\001\010\255\000\000\177\005\083\001\000\000\
\000\000\004\255\194\255\163\255\000\000\117\255\000\000\033\255\
\148\255\079\255\005\000\148\000\151\000\224\255\018\000\000\000\
\000\000\017\000\091\255\024\000\172\255\091\255\000\000\033\000\
\044\005\033\255\054\000\078\005\110\005\010\005\000\000\000\000\
\125\255\059\000\136\255\136\255\136\255\136\255\136\255\136\255\
\136\255\136\255\136\255\136\255\136\255\136\255\136\255\000\000\
\079\255\000\000\117\255\069\000\117\255\017\255\000\000\055\255\
\000\000\024\255\194\255\148\255\068\000\000\000\000\000\148\255\
\077\000\000\000\087\000\000\000\000\000\083\000\000\000\000\000\
\136\255\136\255\081\000\033\255\000\000\025\255\000\000\000\000\
\000\000\177\005\177\005\198\005\198\005\198\005\198\005\198\005\
\212\255\212\255\192\255\192\255\177\005\177\005\194\255\183\255\
\126\255\000\000\055\255\099\000\117\255\117\255\000\000\010\000\
\000\000\079\255\243\254\079\255\182\000\148\255\225\255\000\000\
\000\000\117\255\177\005\145\005\136\255\085\000\000\000\025\255\
\078\000\000\000\034\255\000\000\000\000\117\255\150\255\000\000\
\055\255\101\255\194\255\194\255\119\000\243\254\055\255\136\255\
\177\005\136\255\080\255\025\255\136\255\025\255\124\000\055\255\
\000\000\148\255\177\005\177\005\000\000\078\000\177\005\089\255\
\000\000\243\254"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\041\001\000\000\000\000\
\000\000\000\000\125\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\183\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\125\000\
\021\000\000\000\000\000\000\000\042\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\095\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\229\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\040\000\054\002\000\000\
\000\000\000\000\132\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\228\255\000\000\000\000\000\000\
\000\000\000\000\125\000\000\000\111\000\125\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\189\000\
\000\000\000\000\052\000\000\000\000\000\000\000\139\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\229\003\003\004\067\003\100\003\139\003\172\003\205\003\
\001\003\034\003\180\002\224\002\027\004\057\004\228\000\121\000\
\000\000\000\000\105\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\082\000\000\000\000\000\000\000\160\255\000\000\
\000\000\000\000\081\004\000\000\000\000\000\000\000\000\000\000\
\095\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\155\000\001\000\091\000\000\002\000\000\238\255\037\000\000\000\
\114\004\000\000\000\000\000\000\000\000\000\000\000\000\171\255\
\000\000\000\000\139\004\164\004\000\000\136\002\189\004\253\254\
\000\000\243\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\003\000\050\001\113\005\000\000\197\255\
\135\000\247\000\000\000\230\255\000\000\110\255\000\000\000\000\
\000\000\000\000\002\001\222\255\217\255\000\000\000\000\013\000\
\000\000\249\255\108\001\007\001\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yytablesize = 1779
let yytable = "\071\000\
\048\000\042\000\031\000\014\000\033\000\094\000\016\000\045\000\
\113\000\014\000\034\000\014\000\014\000\079\000\161\000\119\000\
\208\000\145\000\211\000\025\000\104\000\027\000\028\000\035\000\
\145\000\231\000\042\000\091\000\038\000\077\000\024\000\014\000\
\014\000\065\000\218\000\062\000\092\000\014\000\253\000\036\000\
\254\000\055\000\056\000\066\000\091\000\029\000\116\000\064\000\
\032\000\232\000\054\000\108\000\089\000\092\000\090\000\095\000\
\005\000\030\000\014\000\213\000\169\000\114\000\062\000\146\000\
\091\000\078\000\241\000\242\000\087\000\117\000\212\000\062\000\
\014\000\092\000\124\000\255\000\162\000\125\000\187\000\247\000\
\005\000\106\000\115\000\129\000\062\000\036\000\254\000\062\000\
\014\000\214\000\107\000\000\001\006\000\005\000\044\000\254\000\
\180\000\033\000\126\000\184\000\130\000\095\000\005\000\007\000\
\053\000\006\000\050\000\037\000\033\000\005\001\215\000\131\000\
\132\000\170\000\008\000\039\000\086\000\095\000\005\000\040\000\
\166\000\255\000\057\000\062\000\014\000\192\000\057\000\008\000\
\230\000\009\000\255\000\010\000\238\000\011\000\171\000\214\000\
\095\000\005\000\096\000\097\000\012\000\163\000\009\000\085\000\
\010\000\164\000\011\000\033\000\098\000\005\000\095\000\005\000\
\099\000\012\000\047\000\239\000\215\000\100\000\058\000\068\000\
\101\000\059\000\035\000\014\000\219\000\166\000\035\000\166\000\
\221\000\060\000\216\000\051\000\060\000\207\000\062\000\102\000\
\165\000\057\000\062\000\075\000\061\000\103\000\104\000\095\000\
\005\000\033\000\060\000\213\000\061\000\138\000\060\000\040\000\
\105\000\073\000\106\000\074\000\107\000\060\000\060\000\033\000\
\057\000\076\000\083\000\148\000\035\000\251\000\001\000\002\000\
\003\000\093\000\216\000\139\000\237\000\216\000\246\000\166\000\
\166\000\214\000\035\000\080\000\014\000\082\000\014\000\148\000\
\062\000\156\000\157\000\008\001\166\000\033\000\243\000\088\000\
\244\000\075\000\158\000\118\000\159\000\154\000\215\000\155\000\
\166\000\216\000\092\000\216\000\216\000\156\000\157\000\100\000\
\035\000\216\000\010\001\031\000\075\000\175\000\158\000\120\000\
\159\000\134\000\216\000\123\000\062\000\048\000\048\000\048\000\
\100\000\136\000\048\000\048\000\100\000\127\000\048\000\172\000\
\033\000\145\000\177\000\100\000\100\000\069\000\048\000\176\000\
\182\000\048\000\070\000\048\000\017\000\046\000\048\000\048\000\
\048\000\018\000\047\000\035\000\048\000\185\000\048\000\048\000\
\070\000\048\000\104\000\121\000\019\000\048\000\058\000\104\000\
\122\000\036\000\048\000\048\000\048\000\048\000\188\000\048\000\
\090\000\036\000\104\000\193\000\090\000\036\000\048\000\058\000\
\090\000\090\000\036\000\058\000\090\000\210\000\036\000\036\000\
\220\000\108\000\058\000\058\000\090\000\036\000\108\000\090\000\
\128\000\090\000\222\000\108\000\090\000\090\000\090\000\223\000\
\224\000\108\000\090\000\091\000\090\000\090\000\075\000\090\000\
\143\000\144\000\229\000\240\000\092\000\160\000\250\000\106\000\
\090\000\090\000\090\000\090\000\106\000\090\000\053\000\053\000\
\107\000\106\000\053\000\053\000\090\000\107\000\053\000\106\000\
\088\000\252\000\107\000\002\001\009\001\062\000\053\000\056\000\
\107\000\053\000\006\001\053\000\179\000\053\000\053\000\053\000\
\053\000\088\000\074\000\183\000\053\000\087\000\053\000\053\000\
\000\000\053\000\000\000\000\000\088\000\088\000\000\000\000\000\
\000\000\087\000\053\000\053\000\053\000\053\000\087\000\053\000\
\047\000\047\000\087\000\087\000\047\000\047\000\053\000\167\000\
\047\000\087\000\000\000\000\000\000\000\000\000\000\000\000\000\
\047\000\173\000\000\000\047\000\174\000\047\000\077\000\000\000\
\047\000\047\000\047\000\000\000\091\000\000\000\047\000\091\000\
\047\000\047\000\061\000\047\000\000\000\092\000\061\000\061\000\
\092\000\000\000\061\000\000\000\047\000\047\000\047\000\047\000\
\000\000\047\000\061\000\245\000\167\000\061\000\167\000\061\000\
\047\000\217\000\061\000\061\000\061\000\000\000\091\000\000\000\
\061\000\000\000\061\000\061\000\080\000\061\000\000\000\092\000\
\000\000\000\000\000\000\000\000\000\000\086\000\061\000\061\000\
\061\000\061\000\000\000\061\000\092\000\000\000\000\000\000\000\
\092\000\086\000\061\000\000\000\092\000\092\000\086\000\072\000\
\092\000\217\000\086\000\086\000\217\000\000\000\167\000\167\000\
\092\000\086\000\000\000\092\000\000\000\092\000\000\000\000\000\
\092\000\092\000\092\000\167\000\000\000\000\000\092\000\000\000\
\092\000\092\000\000\000\000\000\000\000\000\000\000\000\167\000\
\001\001\000\000\217\000\217\000\000\000\092\000\092\000\092\000\
\217\000\092\000\070\000\000\000\000\000\000\000\070\000\052\000\
\092\000\217\000\070\000\088\000\000\000\005\000\070\000\000\000\
\000\000\000\000\000\000\017\000\000\000\000\000\070\000\088\000\
\018\000\070\000\000\000\070\000\088\000\000\000\070\000\070\000\
\070\000\000\000\000\000\019\000\070\000\000\000\070\000\088\000\
\000\000\000\000\000\000\095\000\005\000\096\000\097\000\000\000\
\000\000\000\000\000\000\070\000\070\000\070\000\023\000\070\000\
\075\000\000\000\000\000\000\000\075\000\000\000\070\000\000\000\
\075\000\000\000\000\000\101\000\075\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\075\000\000\000\000\000\075\000\
\000\000\075\000\000\000\000\000\075\000\075\000\075\000\000\000\
\103\000\104\000\075\000\000\000\075\000\000\000\000\000\038\000\
\000\000\000\000\000\000\105\000\073\000\106\000\000\000\107\000\
\073\000\075\000\075\000\075\000\074\000\075\000\000\000\000\000\
\073\000\000\000\000\000\000\000\075\000\000\000\000\000\000\000\
\074\000\000\000\000\000\073\000\000\000\074\000\000\000\000\000\
\074\000\074\000\074\000\000\000\000\000\000\000\073\000\000\000\
\074\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\
\077\000\000\000\000\000\000\000\000\000\073\000\074\000\073\000\
\077\000\073\000\000\000\000\000\077\000\000\000\000\000\000\000\
\073\000\000\000\000\000\000\000\077\000\000\000\000\000\077\000\
\000\000\077\000\000\000\000\000\077\000\077\000\077\000\000\000\
\000\000\000\000\077\000\000\000\077\000\000\000\000\000\009\000\
\000\000\000\000\000\000\000\000\000\000\000\000\080\000\000\000\
\000\000\077\000\077\000\077\000\000\000\077\000\080\000\000\000\
\000\000\000\000\080\000\000\000\077\000\000\000\000\000\000\000\
\000\000\000\000\080\000\000\000\000\000\080\000\000\000\080\000\
\008\000\072\000\080\000\080\000\080\000\000\000\000\000\000\000\
\080\000\072\000\080\000\000\000\000\000\072\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\072\000\000\000\080\000\
\080\000\080\000\072\000\080\000\000\000\072\000\072\000\072\000\
\000\000\007\000\080\000\072\000\000\000\072\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\072\000\072\000\072\000\000\000\072\000\000\000\
\000\000\000\000\000\000\000\000\005\000\072\000\005\000\005\000\
\000\000\005\000\015\000\000\000\005\000\005\000\000\000\005\000\
\005\000\005\000\005\000\005\000\000\000\000\000\000\000\005\000\
\005\000\005\000\000\000\005\000\005\000\005\000\000\000\005\000\
\005\000\000\000\005\000\005\000\000\000\000\000\005\000\000\000\
\005\000\005\000\005\000\016\000\000\000\023\000\000\000\023\000\
\023\000\000\000\023\000\000\000\000\000\023\000\023\000\005\000\
\023\000\023\000\023\000\023\000\023\000\000\000\000\000\000\000\
\023\000\023\000\023\000\000\000\023\000\023\000\023\000\000\000\
\023\000\023\000\000\000\023\000\023\000\000\000\000\000\023\000\
\000\000\023\000\013\000\023\000\000\000\000\000\038\000\000\000\
\038\000\038\000\000\000\038\000\000\000\000\000\038\000\038\000\
\023\000\038\000\038\000\038\000\038\000\038\000\000\000\000\000\
\000\000\038\000\038\000\038\000\000\000\038\000\038\000\038\000\
\000\000\038\000\038\000\014\000\038\000\038\000\000\000\000\000\
\038\000\000\000\038\000\000\000\038\000\000\000\000\000\000\000\
\000\000\000\000\010\000\000\000\010\000\010\000\000\000\000\000\
\000\000\038\000\010\000\010\000\000\000\010\000\010\000\010\000\
\010\000\010\000\000\000\000\000\012\000\010\000\010\000\010\000\
\000\000\010\000\010\000\010\000\000\000\000\000\000\000\000\000\
\010\000\010\000\000\000\000\000\010\000\000\000\000\000\010\000\
\000\000\000\000\000\000\000\000\006\000\000\000\009\000\000\000\
\009\000\009\000\000\000\000\000\000\000\010\000\009\000\009\000\
\000\000\009\000\009\000\009\000\009\000\009\000\000\000\000\000\
\000\000\009\000\009\000\009\000\000\000\009\000\009\000\009\000\
\000\000\000\000\011\000\000\000\009\000\009\000\000\000\008\000\
\009\000\008\000\008\000\009\000\000\000\000\000\000\000\008\000\
\008\000\000\000\008\000\008\000\008\000\008\000\008\000\000\000\
\000\000\009\000\017\000\008\000\000\000\000\000\008\000\008\000\
\008\000\000\000\000\000\000\000\000\000\008\000\008\000\000\000\
\007\000\008\000\007\000\007\000\008\000\000\000\000\000\000\000\
\007\000\007\000\000\000\007\000\007\000\007\000\007\000\007\000\
\018\000\000\000\008\000\000\000\007\000\000\000\000\000\007\000\
\007\000\007\000\000\000\000\000\000\000\000\000\007\000\007\000\
\000\000\015\000\007\000\015\000\015\000\007\000\000\000\000\000\
\019\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\
\015\000\000\000\000\000\007\000\000\000\015\000\000\000\000\000\
\015\000\015\000\015\000\000\000\000\000\000\000\000\000\015\000\
\015\000\000\000\016\000\015\000\016\000\016\000\015\000\000\000\
\000\000\020\000\000\000\000\000\000\000\016\000\000\000\000\000\
\000\000\016\000\000\000\000\000\015\000\000\000\016\000\000\000\
\000\000\016\000\016\000\016\000\000\000\000\000\000\000\000\000\
\016\000\016\000\022\000\000\000\016\000\000\000\000\000\016\000\
\000\000\013\000\000\000\013\000\013\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\013\000\016\000\000\000\000\000\
\013\000\000\000\000\000\021\000\000\000\013\000\000\000\000\000\
\013\000\013\000\013\000\000\000\000\000\000\000\000\000\013\000\
\013\000\000\000\014\000\013\000\014\000\014\000\013\000\000\000\
\000\000\000\000\000\000\000\000\040\000\014\000\000\000\000\000\
\000\000\014\000\000\000\000\000\013\000\000\000\014\000\000\000\
\000\000\014\000\014\000\014\000\000\000\000\000\000\000\000\000\
\014\000\014\000\000\000\012\000\014\000\012\000\012\000\014\000\
\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\000\
\000\000\000\000\012\000\000\000\000\000\014\000\000\000\012\000\
\000\000\000\000\012\000\012\000\012\000\006\000\006\000\000\000\
\000\000\012\000\012\000\000\000\000\000\012\000\006\000\000\000\
\012\000\000\000\006\000\000\000\000\000\000\000\000\000\006\000\
\000\000\000\000\006\000\006\000\006\000\000\000\012\000\000\000\
\000\000\006\000\006\000\011\000\011\000\006\000\000\000\000\000\
\006\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\000\000\011\000\006\000\000\000\
\011\000\011\000\011\000\017\000\017\000\000\000\000\000\011\000\
\011\000\000\000\000\000\011\000\017\000\000\000\011\000\000\000\
\017\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\
\017\000\017\000\017\000\000\000\011\000\000\000\000\000\017\000\
\017\000\018\000\018\000\017\000\000\000\000\000\017\000\000\000\
\000\000\000\000\018\000\000\000\000\000\000\000\018\000\000\000\
\000\000\000\000\000\000\018\000\017\000\000\000\018\000\018\000\
\018\000\019\000\019\000\000\000\000\000\018\000\018\000\000\000\
\000\000\018\000\019\000\000\000\018\000\000\000\019\000\000\000\
\000\000\000\000\000\000\019\000\000\000\000\000\019\000\019\000\
\019\000\000\000\018\000\000\000\000\000\019\000\019\000\000\000\
\000\000\019\000\020\000\020\000\019\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\000\000\000\000\000\000\000\020\000\
\000\000\000\000\019\000\000\000\020\000\000\000\000\000\020\000\
\020\000\020\000\000\000\022\000\022\000\000\000\020\000\020\000\
\000\000\000\000\020\000\000\000\022\000\020\000\000\000\000\000\
\022\000\000\000\000\000\000\000\000\000\022\000\000\000\000\000\
\022\000\022\000\022\000\020\000\021\000\021\000\000\000\022\000\
\022\000\000\000\000\000\022\000\000\000\021\000\022\000\000\000\
\000\000\021\000\000\000\000\000\000\000\000\000\021\000\000\000\
\000\000\021\000\021\000\021\000\022\000\040\000\040\000\000\000\
\021\000\021\000\000\000\000\000\021\000\000\000\040\000\021\000\
\000\000\000\000\040\000\137\000\000\000\140\000\141\000\040\000\
\000\000\142\000\040\000\040\000\040\000\021\000\000\000\000\000\
\000\000\040\000\040\000\000\000\000\000\040\000\000\000\000\000\
\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\194\000\195\000\196\000\197\000\198\000\
\199\000\200\000\201\000\202\000\203\000\204\000\205\000\206\000\
\147\000\000\000\000\000\000\000\000\000\148\000\000\000\000\000\
\149\000\150\000\000\000\000\000\151\000\152\000\153\000\000\000\
\000\000\000\000\000\000\154\000\000\000\155\000\000\000\000\000\
\000\000\227\000\228\000\156\000\157\000\000\000\000\000\000\000\
\000\000\000\000\147\000\000\000\158\000\000\000\159\000\148\000\
\000\000\000\000\149\000\150\000\000\000\000\000\151\000\152\000\
\153\000\000\000\000\000\191\000\000\000\154\000\000\000\155\000\
\000\000\000\000\000\000\000\000\000\000\156\000\157\000\000\000\
\186\000\000\000\000\000\000\000\147\000\249\000\158\000\000\000\
\159\000\148\000\000\000\000\000\149\000\150\000\000\000\000\000\
\151\000\152\000\153\000\000\000\000\000\000\000\000\000\154\000\
\003\001\155\000\004\001\189\000\000\000\007\001\000\000\156\000\
\157\000\000\000\000\000\000\000\147\000\000\000\000\000\000\000\
\158\000\148\000\159\000\000\000\149\000\150\000\000\000\000\000\
\151\000\152\000\153\000\000\000\000\000\000\000\000\000\154\000\
\000\000\155\000\000\000\000\000\000\000\000\000\000\000\156\000\
\157\000\000\000\000\000\000\000\000\000\000\000\190\000\147\000\
\158\000\248\000\159\000\000\000\148\000\000\000\000\000\149\000\
\150\000\000\000\000\000\151\000\152\000\153\000\000\000\000\000\
\000\000\000\000\154\000\000\000\155\000\000\000\000\000\000\000\
\000\000\000\000\156\000\157\000\000\000\000\000\000\000\147\000\
\000\000\000\000\000\000\158\000\148\000\159\000\000\000\149\000\
\150\000\000\000\000\000\151\000\152\000\153\000\000\000\000\000\
\000\000\000\000\154\000\000\000\155\000\000\000\000\000\000\000\
\000\000\148\000\156\000\157\000\149\000\150\000\000\000\000\000\
\151\000\152\000\153\000\158\000\000\000\159\000\000\000\154\000\
\000\000\155\000\000\000\000\000\000\000\000\000\000\000\156\000\
\157\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\158\000\000\000\159\000"

let yycheck = "\039\000\
\000\000\005\001\008\001\001\000\006\001\065\000\000\000\000\000\
\068\000\007\000\000\000\009\000\010\000\048\000\011\001\075\000\
\163\000\008\001\165\000\007\000\000\000\009\000\010\000\025\001\
\008\001\001\001\030\001\041\001\002\001\002\001\025\001\029\000\
\030\000\001\001\011\001\033\000\050\001\035\000\005\001\000\000\
\007\001\029\000\030\000\011\001\041\001\025\001\007\001\035\000\
\054\001\025\001\052\001\000\000\060\000\050\001\000\000\001\001\
\002\001\004\001\056\000\005\001\120\000\069\000\060\000\054\001\
\041\001\038\001\213\000\214\000\056\000\030\001\054\001\069\000\
\070\000\050\001\082\000\042\001\116\000\085\000\138\000\226\000\
\002\001\000\000\070\000\010\001\082\000\001\001\007\001\085\000\
\086\000\035\001\000\000\238\000\014\001\002\001\032\001\007\001\
\131\000\006\001\086\000\134\000\027\001\001\001\002\001\025\001\
\000\000\014\001\002\001\023\001\006\001\030\001\056\001\038\001\
\039\001\121\000\036\001\025\001\025\001\001\001\002\001\029\001\
\118\000\042\001\002\001\121\000\122\000\001\001\002\001\036\001\
\188\000\051\001\042\001\053\001\007\001\055\001\122\000\035\001\
\001\001\002\001\003\001\004\001\062\001\025\001\051\001\006\001\
\053\001\029\001\055\001\006\001\013\001\002\001\001\001\002\001\
\017\001\062\001\000\000\030\001\056\001\022\001\002\001\001\001\
\025\001\014\001\025\001\161\000\172\000\163\000\025\001\165\000\
\176\000\010\001\168\000\030\001\025\001\161\000\172\000\040\001\
\060\001\007\001\176\000\001\001\033\001\046\001\047\001\001\001\
\002\001\006\001\027\001\005\001\000\000\001\001\031\001\029\001\
\057\001\001\001\059\001\001\001\061\001\038\001\039\001\006\001\
\030\001\023\001\031\001\012\001\025\001\232\000\001\000\002\000\
\003\000\030\001\208\000\023\001\030\001\211\000\222\000\213\000\
\214\000\035\001\025\001\032\001\218\000\006\001\220\000\012\001\
\222\000\034\001\035\001\254\000\226\000\006\001\218\000\025\001\
\220\000\006\001\043\001\011\001\045\001\026\001\056\001\028\001\
\238\000\239\000\000\000\241\000\242\000\034\001\035\001\010\001\
\025\001\247\000\002\001\008\001\025\001\030\001\043\001\001\001\
\045\001\038\001\000\001\002\001\002\001\005\001\006\001\007\001\
\027\001\001\001\010\001\011\001\031\001\002\001\014\001\011\001\
\006\001\008\001\002\001\038\001\039\001\006\001\022\001\006\001\
\001\001\025\001\011\001\027\001\022\001\022\001\030\001\031\001\
\032\001\027\001\027\001\025\001\036\001\005\001\038\001\039\001\
\000\000\041\001\022\001\006\001\038\001\038\001\010\001\027\001\
\011\001\010\001\050\001\051\001\052\001\053\001\001\001\055\001\
\002\001\018\001\038\001\001\001\006\001\022\001\062\001\027\001\
\010\001\011\001\027\001\031\001\014\001\001\001\031\001\032\001\
\005\001\022\001\038\001\039\001\022\001\038\001\027\001\025\001\
\030\001\027\001\006\001\032\001\030\001\031\001\032\001\001\001\
\006\001\038\001\036\001\041\001\038\001\039\001\000\000\041\001\
\106\000\107\000\018\001\001\001\050\001\111\000\018\001\022\001\
\050\001\051\001\052\001\053\001\027\001\055\001\006\001\007\001\
\022\001\032\001\010\001\011\001\062\001\027\001\014\001\038\001\
\010\001\044\001\032\001\005\001\001\001\001\001\022\001\007\001\
\038\001\025\001\252\000\027\001\131\000\026\000\030\001\031\001\
\032\001\027\001\000\000\133\000\036\001\010\001\038\001\039\001\
\255\255\041\001\255\255\255\255\038\001\039\001\255\255\255\255\
\255\255\022\001\050\001\051\001\052\001\053\001\027\001\055\001\
\006\001\007\001\031\001\032\001\010\001\011\001\062\001\118\000\
\014\001\038\001\255\255\255\255\255\255\255\255\255\255\255\255\
\022\001\030\001\255\255\025\001\030\001\027\001\000\000\255\255\
\030\001\031\001\032\001\255\255\041\001\255\255\036\001\041\001\
\038\001\039\001\006\001\041\001\255\255\050\001\010\001\011\001\
\050\001\255\255\014\001\255\255\050\001\051\001\052\001\053\001\
\255\255\055\001\022\001\030\001\163\000\025\001\165\000\027\001\
\062\001\168\000\030\001\031\001\032\001\255\255\041\001\255\255\
\036\001\255\255\038\001\039\001\000\000\041\001\255\255\050\001\
\255\255\255\255\255\255\255\255\255\255\010\001\050\001\051\001\
\052\001\053\001\255\255\055\001\002\001\255\255\255\255\255\255\
\006\001\022\001\062\001\255\255\010\001\011\001\027\001\000\000\
\014\001\208\000\031\001\032\001\211\000\255\255\213\000\214\000\
\022\001\038\001\255\255\025\001\255\255\027\001\255\255\255\255\
\030\001\031\001\032\001\226\000\255\255\255\255\036\001\255\255\
\038\001\039\001\255\255\255\255\255\255\255\255\255\255\238\000\
\239\000\255\255\241\000\242\000\255\255\051\001\052\001\053\001\
\247\000\055\001\002\001\255\255\255\255\255\255\006\001\010\001\
\062\001\000\001\010\001\010\001\255\255\000\000\014\001\255\255\
\255\255\255\255\255\255\022\001\255\255\255\255\022\001\022\001\
\027\001\025\001\255\255\027\001\027\001\255\255\030\001\031\001\
\032\001\255\255\255\255\038\001\036\001\255\255\038\001\038\001\
\255\255\255\255\255\255\001\001\002\001\003\001\004\001\255\255\
\255\255\255\255\255\255\051\001\052\001\053\001\000\000\055\001\
\002\001\255\255\255\255\255\255\006\001\255\255\062\001\255\255\
\010\001\255\255\255\255\025\001\014\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\022\001\255\255\255\255\025\001\
\255\255\027\001\255\255\255\255\030\001\031\001\032\001\255\255\
\046\001\047\001\036\001\255\255\038\001\255\255\255\255\000\000\
\255\255\255\255\255\255\057\001\002\001\059\001\255\255\061\001\
\006\001\051\001\052\001\053\001\010\001\055\001\255\255\255\255\
\014\001\255\255\255\255\255\255\062\001\255\255\255\255\255\255\
\022\001\255\255\255\255\025\001\255\255\027\001\255\255\255\255\
\030\001\031\001\032\001\255\255\255\255\255\255\036\001\255\255\
\038\001\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\002\001\255\255\255\255\255\255\255\255\051\001\052\001\053\001\
\010\001\055\001\255\255\255\255\014\001\255\255\255\255\255\255\
\062\001\255\255\255\255\255\255\022\001\255\255\255\255\025\001\
\255\255\027\001\255\255\255\255\030\001\031\001\032\001\255\255\
\255\255\255\255\036\001\255\255\038\001\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\002\001\255\255\
\255\255\051\001\052\001\053\001\255\255\055\001\010\001\255\255\
\255\255\255\255\014\001\255\255\062\001\255\255\255\255\255\255\
\255\255\255\255\022\001\255\255\255\255\025\001\255\255\027\001\
\000\000\002\001\030\001\031\001\032\001\255\255\255\255\255\255\
\036\001\010\001\038\001\255\255\255\255\014\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\022\001\255\255\051\001\
\052\001\053\001\027\001\055\001\255\255\030\001\031\001\032\001\
\255\255\000\000\062\001\036\001\255\255\038\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\051\001\052\001\053\001\255\255\055\001\255\255\
\255\255\255\255\255\255\255\255\007\001\062\001\009\001\010\001\
\255\255\012\001\000\000\255\255\015\001\016\001\255\255\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\255\255\026\001\
\027\001\028\001\255\255\030\001\031\001\032\001\255\255\034\001\
\035\001\255\255\037\001\038\001\255\255\255\255\041\001\255\255\
\043\001\044\001\045\001\000\000\255\255\007\001\255\255\009\001\
\010\001\255\255\012\001\255\255\255\255\015\001\016\001\058\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\255\255\
\026\001\027\001\028\001\255\255\030\001\031\001\032\001\255\255\
\034\001\035\001\255\255\037\001\038\001\255\255\255\255\041\001\
\255\255\043\001\000\000\045\001\255\255\255\255\007\001\255\255\
\009\001\010\001\255\255\012\001\255\255\255\255\015\001\016\001\
\058\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\255\255\026\001\027\001\028\001\255\255\030\001\031\001\032\001\
\255\255\034\001\035\001\000\000\037\001\038\001\255\255\255\255\
\041\001\255\255\043\001\255\255\045\001\255\255\255\255\255\255\
\255\255\255\255\007\001\255\255\009\001\010\001\255\255\255\255\
\255\255\058\001\015\001\016\001\255\255\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\000\000\026\001\027\001\028\001\
\255\255\030\001\031\001\032\001\255\255\255\255\255\255\255\255\
\037\001\038\001\255\255\255\255\041\001\255\255\255\255\044\001\
\255\255\255\255\255\255\255\255\000\000\255\255\007\001\255\255\
\009\001\010\001\255\255\255\255\255\255\058\001\015\001\016\001\
\255\255\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\255\255\026\001\027\001\028\001\255\255\030\001\031\001\032\001\
\255\255\255\255\000\000\255\255\037\001\038\001\255\255\007\001\
\041\001\009\001\010\001\044\001\255\255\255\255\255\255\015\001\
\016\001\255\255\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\058\001\000\000\027\001\255\255\255\255\030\001\031\001\
\032\001\255\255\255\255\255\255\255\255\037\001\038\001\255\255\
\007\001\041\001\009\001\010\001\044\001\255\255\255\255\255\255\
\015\001\016\001\255\255\018\001\019\001\020\001\021\001\022\001\
\000\000\255\255\058\001\255\255\027\001\255\255\255\255\030\001\
\031\001\032\001\255\255\255\255\255\255\255\255\037\001\038\001\
\255\255\007\001\041\001\009\001\010\001\044\001\255\255\255\255\
\000\000\255\255\255\255\255\255\018\001\255\255\255\255\255\255\
\022\001\255\255\255\255\058\001\255\255\027\001\255\255\255\255\
\030\001\031\001\032\001\255\255\255\255\255\255\255\255\037\001\
\038\001\255\255\007\001\041\001\009\001\010\001\044\001\255\255\
\255\255\000\000\255\255\255\255\255\255\018\001\255\255\255\255\
\255\255\022\001\255\255\255\255\058\001\255\255\027\001\255\255\
\255\255\030\001\031\001\032\001\255\255\255\255\255\255\255\255\
\037\001\038\001\000\000\255\255\041\001\255\255\255\255\044\001\
\255\255\007\001\255\255\009\001\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\058\001\255\255\255\255\
\022\001\255\255\255\255\000\000\255\255\027\001\255\255\255\255\
\030\001\031\001\032\001\255\255\255\255\255\255\255\255\037\001\
\038\001\255\255\007\001\041\001\009\001\010\001\044\001\255\255\
\255\255\255\255\255\255\255\255\000\000\018\001\255\255\255\255\
\255\255\022\001\255\255\255\255\058\001\255\255\027\001\255\255\
\255\255\030\001\031\001\032\001\255\255\255\255\255\255\255\255\
\037\001\038\001\255\255\007\001\041\001\009\001\010\001\044\001\
\255\255\255\255\255\255\255\255\255\255\255\255\018\001\255\255\
\255\255\255\255\022\001\255\255\255\255\058\001\255\255\027\001\
\255\255\255\255\030\001\031\001\032\001\009\001\010\001\255\255\
\255\255\037\001\038\001\255\255\255\255\041\001\018\001\255\255\
\044\001\255\255\022\001\255\255\255\255\255\255\255\255\027\001\
\255\255\255\255\030\001\031\001\032\001\255\255\058\001\255\255\
\255\255\037\001\038\001\009\001\010\001\041\001\255\255\255\255\
\044\001\255\255\255\255\255\255\018\001\255\255\255\255\255\255\
\022\001\255\255\255\255\255\255\255\255\027\001\058\001\255\255\
\030\001\031\001\032\001\009\001\010\001\255\255\255\255\037\001\
\038\001\255\255\255\255\041\001\018\001\255\255\044\001\255\255\
\022\001\255\255\255\255\255\255\255\255\027\001\255\255\255\255\
\030\001\031\001\032\001\255\255\058\001\255\255\255\255\037\001\
\038\001\009\001\010\001\041\001\255\255\255\255\044\001\255\255\
\255\255\255\255\018\001\255\255\255\255\255\255\022\001\255\255\
\255\255\255\255\255\255\027\001\058\001\255\255\030\001\031\001\
\032\001\009\001\010\001\255\255\255\255\037\001\038\001\255\255\
\255\255\041\001\018\001\255\255\044\001\255\255\022\001\255\255\
\255\255\255\255\255\255\027\001\255\255\255\255\030\001\031\001\
\032\001\255\255\058\001\255\255\255\255\037\001\038\001\255\255\
\255\255\041\001\009\001\010\001\044\001\255\255\255\255\255\255\
\255\255\255\255\255\255\018\001\255\255\255\255\255\255\022\001\
\255\255\255\255\058\001\255\255\027\001\255\255\255\255\030\001\
\031\001\032\001\255\255\009\001\010\001\255\255\037\001\038\001\
\255\255\255\255\041\001\255\255\018\001\044\001\255\255\255\255\
\022\001\255\255\255\255\255\255\255\255\027\001\255\255\255\255\
\030\001\031\001\032\001\058\001\009\001\010\001\255\255\037\001\
\038\001\255\255\255\255\041\001\255\255\018\001\044\001\255\255\
\255\255\022\001\255\255\255\255\255\255\255\255\027\001\255\255\
\255\255\030\001\031\001\032\001\058\001\009\001\010\001\255\255\
\037\001\038\001\255\255\255\255\041\001\255\255\018\001\044\001\
\255\255\255\255\022\001\099\000\255\255\101\000\102\000\027\001\
\255\255\105\000\030\001\031\001\032\001\058\001\255\255\255\255\
\255\255\037\001\038\001\255\255\255\255\041\001\255\255\255\255\
\044\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\058\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\147\000\148\000\149\000\150\000\151\000\
\152\000\153\000\154\000\155\000\156\000\157\000\158\000\159\000\
\007\001\255\255\255\255\255\255\255\255\012\001\255\255\255\255\
\015\001\016\001\255\255\255\255\019\001\020\001\021\001\255\255\
\255\255\255\255\255\255\026\001\255\255\028\001\255\255\255\255\
\255\255\185\000\186\000\034\001\035\001\255\255\255\255\255\255\
\255\255\255\255\007\001\255\255\043\001\255\255\045\001\012\001\
\255\255\255\255\015\001\016\001\255\255\255\255\019\001\020\001\
\021\001\255\255\255\255\058\001\255\255\026\001\255\255\028\001\
\255\255\255\255\255\255\255\255\255\255\034\001\035\001\255\255\
\037\001\255\255\255\255\255\255\007\001\229\000\043\001\255\255\
\045\001\012\001\255\255\255\255\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\026\001\
\248\000\028\001\250\000\030\001\255\255\253\000\255\255\034\001\
\035\001\255\255\255\255\255\255\007\001\255\255\255\255\255\255\
\043\001\012\001\045\001\255\255\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\026\001\
\255\255\028\001\255\255\255\255\255\255\255\255\255\255\034\001\
\035\001\255\255\255\255\255\255\255\255\255\255\041\001\007\001\
\043\001\009\001\045\001\255\255\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\026\001\255\255\028\001\255\255\255\255\255\255\
\255\255\255\255\034\001\035\001\255\255\255\255\255\255\007\001\
\255\255\255\255\255\255\043\001\012\001\045\001\255\255\015\001\
\016\001\255\255\255\255\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\026\001\255\255\028\001\255\255\255\255\255\255\
\255\255\012\001\034\001\035\001\015\001\016\001\255\255\255\255\
\019\001\020\001\021\001\043\001\255\255\045\001\255\255\026\001\
\255\255\028\001\255\255\255\255\255\255\255\255\255\255\034\001\
\035\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\043\001\255\255\045\001"

let yynames_const = "\
  ARROW\000\
  COLON\000\
  COMMA\000\
  DOT\000\
  ELSE\000\
  END\000\
  EOF\000\
  EQUAL\000\
  EQUALEQUAL\000\
  FUNCTION\000\
  FUNCTOR\000\
  GREATER\000\
  GREATEREQUAL\000\
  IF\000\
  IN\000\
  LESS\000\
  LESSEQUAL\000\
  LESSGREATER\000\
  LET\000\
  REC\000\
  LIDENT\000\
  LPAREN\000\
  MINUS\000\
  MODULE\000\
  PLUS\000\
  QUOTE\000\
  RPAREN\000\
  SEMICOLON\000\
  SEMISEMI\000\
  SIG\000\
  SLASH\000\
  STAR\000\
  STRUCT\000\
  THEN\000\
  TYPE\000\
  VALUE\000\
  MATCH\000\
  WITH\000\
  COLCOL\000\
  CONJ\000\
  BAR\000\
  DISJ\000\
  TRUE\000\
  FALSE\000\
  NOT\000\
  AND\000\
  MCOD\000\
  LMCOD\000\
  RMCOD\000\
  MESC\000\
  DOLLAR\000\
  MRUN\000\
  CODE\000\
  LCOD\000\
  RCOD\000\
  ESC\000\
  CSP\000\
  RUN\000\
  RECAPP\000\
  "

let yynames_block = "\
  VAR\000\
  CON\000\
  STR\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 137 "parser.mly"
                  ( IdentP(Ident.create _1) )
# 865 "parser.ml"
               : 'path))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'path) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 138 "parser.mly"
                  ( DotP(_1, _3) )
# 873 "parser.ml"
               : 'path))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 141 "parser.mly"
                  ( IdentP(Ident.create _1) )
# 880 "parser.ml"
               : 'path_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'path) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 142 "parser.mly"
                  ( DotP(_1, _3) )
# 888 "parser.ml"
               : 'path_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr1) in
    Obj.repr(
# 148 "parser.mly"
                                      ( _1 )
# 895 "parser.ml"
               : 'valexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'valexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr) in
    Obj.repr(
# 149 "parser.mly"
                                      ( binop "," _1 _3 )
# 903 "parser.ml"
               : 'valexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'valexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr) in
    Obj.repr(
# 150 "parser.mly"
                                      ( binop "+" _1 _3 )
# 911 "parser.ml"
               : 'valexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'valexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr) in
    Obj.repr(
# 151 "parser.mly"
                                      ( binop "-" _1 _3 )
# 919 "parser.ml"
               : 'valexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'valexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr) in
    Obj.repr(
# 152 "parser.mly"
                                      ( binop "*" _1 _3 )
# 927 "parser.ml"
               : 'valexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'valexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr) in
    Obj.repr(
# 153 "parser.mly"
                                      ( binop "/" _1 _3 )
# 935 "parser.ml"
               : 'valexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'valexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr) in
    Obj.repr(
# 154 "parser.mly"
                                      ( binop "==" _1 _3 )
# 943 "parser.ml"
               : 'valexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'valexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr) in
    Obj.repr(
# 155 "parser.mly"
                                      ( binop "<>" _1 _3 )
# 951 "parser.ml"
               : 'valexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'valexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr) in
    Obj.repr(
# 156 "parser.mly"
                                      ( binop "<" _1 _3 )
# 959 "parser.ml"
               : 'valexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'valexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr) in
    Obj.repr(
# 157 "parser.mly"
                                      ( binop "<=" _1 _3 )
# 967 "parser.ml"
               : 'valexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'valexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr) in
    Obj.repr(
# 158 "parser.mly"
                                      ( binop ">" _1 _3 )
# 975 "parser.ml"
               : 'valexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'valexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr) in
    Obj.repr(
# 159 "parser.mly"
                                      ( binop ">=" _1 _3 )
# 983 "parser.ml"
               : 'valexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'valexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr) in
    Obj.repr(
# 160 "parser.mly"
                                      ( binop "&&" _1 _3 )
# 991 "parser.ml"
               : 'valexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'valexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr) in
    Obj.repr(
# 161 "parser.mly"
                                      ( binop "||" _1 _3 )
# 999 "parser.ml"
               : 'valexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr) in
    Obj.repr(
# 162 "parser.mly"
                                    ( Core.FunE(Ident.create _2, _4) )
# 1007 "parser.ml"
               : 'valexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'valbind) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr) in
    Obj.repr(
# 163 "parser.mly"
                                    ( Core.LetE(Ident.create _2, _3, _5) )
# 1016 "parser.ml"
               : 'valexpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'valbind) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr) in
    Obj.repr(
# 164 "parser.mly"
                                       ( Core.LetRecE(Ident.create _3, _4, _6) )
# 1025 "parser.ml"
               : 'valexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'valexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'valexpr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr) in
    Obj.repr(
# 165 "parser.mly"
                                         ( Core.IfE(_2, _4, _6) )
# 1034 "parser.ml"
               : 'valexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'valexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'clauselist) in
    Obj.repr(
# 166 "parser.mly"
                                      ( Core.MatchE (_2, _4) )
# 1042 "parser.ml"
               : 'valexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr0) in
    Obj.repr(
# 169 "parser.mly"
             ( _1 )
# 1049 "parser.ml"
               : 'valexpr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'valexpr1) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr0) in
    Obj.repr(
# 170 "parser.mly"
                      ( Core.AppE(_1, _2) )
# 1057 "parser.ml"
               : 'valexpr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'path_var) in
    Obj.repr(
# 173 "parser.mly"
              ( Core.Longident(_1) )
# 1064 "parser.ml"
               : 'valexpr0))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 174 "parser.mly"
                          ( Core.IntE _1 )
# 1071 "parser.ml"
               : 'valexpr0))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 175 "parser.mly"
                          ( Core.StrE _1 )
# 1078 "parser.ml"
               : 'valexpr0))
; (fun __caml_parser_env ->
    Obj.repr(
# 176 "parser.mly"
                          ( Core.BoolE(true) )
# 1084 "parser.ml"
               : 'valexpr0))
; (fun __caml_parser_env ->
    Obj.repr(
# 177 "parser.mly"
                          ( Core.BoolE(false) )
# 1090 "parser.ml"
               : 'valexpr0))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'valexpr) in
    Obj.repr(
# 178 "parser.mly"
                          ( Core.CodE(_2) )
# 1097 "parser.ml"
               : 'valexpr0))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr0) in
    Obj.repr(
# 179 "parser.mly"
                          ( Core.EscE(_2) )
# 1104 "parser.ml"
               : 'valexpr0))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr0) in
    Obj.repr(
# 180 "parser.mly"
                          ( Core.RunE(_2) )
# 1111 "parser.ml"
               : 'valexpr0))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'path) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 181 "parser.mly"
                          ( Core.DollarE(_1, _3) )
# 1119 "parser.ml"
               : 'valexpr0))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'valexpr) in
    Obj.repr(
# 182 "parser.mly"
                          ( _2 )
# 1126 "parser.ml"
               : 'valexpr0))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr) in
    Obj.repr(
# 185 "parser.mly"
                      ( _2 )
# 1133 "parser.ml"
               : 'valbind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'valbind) in
    Obj.repr(
# 186 "parser.mly"
                    ( Core.FunE(Ident.create _1, _2) )
# 1141 "parser.ml"
               : 'valbind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'clauselist) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'clauselist) in
    Obj.repr(
# 190 "parser.mly"
                              ( _1 @ _3 )
# 1149 "parser.ml"
               : 'clauselist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'clause) in
    Obj.repr(
# 191 "parser.mly"
                              ( _1 :: [] )
# 1156 "parser.ml"
               : 'clauselist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'valexpr) in
    Obj.repr(
# 194 "parser.mly"
                           ( _1, _3 )
# 1164 "parser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 197 "parser.mly"
                            ( ConsPat (_1, Ident.create _3) )
# 1172 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 198 "parser.mly"
                            ( PairPat (_1, _3) )
# 1180 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simplepattern) in
    Obj.repr(
# 199 "parser.mly"
                            ( _1 )
# 1187 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 202 "parser.mly"
                            ( _2 )
# 1194 "parser.ml"
               : 'simplepattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 203 "parser.mly"
                            ( match _1 with
                              | "_" -> WildPat
                              | x0  -> VarPat (Ident.create x0) )
# 1203 "parser.ml"
               : 'simplepattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 211 "parser.mly"
                          ( Core.Var(find_type_variable _2) )
# 1210 "parser.ml"
               : 'simpletype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simpletype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simpletype) in
    Obj.repr(
# 212 "parser.mly"
                                ( Core.Typeconstr(Core.path_arrow, [_1; _3]) )
# 1218 "parser.ml"
               : 'simpletype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simpletype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simpletype) in
    Obj.repr(
# 213 "parser.mly"
                                ( Core.Typeconstr(Core.path_star, [_1; _3]) )
# 1226 "parser.ml"
               : 'simpletype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'path_var) in
    Obj.repr(
# 214 "parser.mly"
                                ( Core.Typeconstr(_1, []) )
# 1233 "parser.ml"
               : 'simpletype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simpletype) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'path_var) in
    Obj.repr(
# 215 "parser.mly"
                                ( Core.Typeconstr(_2, [_1]) )
# 1241 "parser.ml"
               : 'simpletype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'simpletypelist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'path_var) in
    Obj.repr(
# 216 "parser.mly"
                                          ( Core.Typeconstr(_4, List.rev _2) )
# 1249 "parser.ml"
               : 'simpletype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simpletype) in
    Obj.repr(
# 217 "parser.mly"
                                ( Core.Typeconstr(Core.path_code, [_1]) )
# 1256 "parser.ml"
               : 'simpletype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simpletype) in
    Obj.repr(
# 218 "parser.mly"
                                ( Core.Typeconstr(Core.path_csp, [_2]) )
# 1263 "parser.ml"
               : 'simpletype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'path) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 219 "parser.mly"
                                ( Core.dollar_type 
                                    (Core.Typeconstr(_1, [])) 
                                    (Core.Typeconstr(IdentP(Ident.create _3), [])) )
# 1273 "parser.ml"
               : 'simpletype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simpletype) in
    Obj.repr(
# 222 "parser.mly"
                                ( _2 )
# 1280 "parser.ml"
               : 'simpletype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simpletype) in
    Obj.repr(
# 225 "parser.mly"
               ( [_1] )
# 1287 "parser.ml"
               : 'simpletypelist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simpletypelist) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simpletype) in
    Obj.repr(
# 226 "parser.mly"
                                    ( _3::_1 )
# 1295 "parser.ml"
               : 'simpletypelist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'colon_begin_scheme) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simpletype) in
    Obj.repr(
# 231 "parser.mly"
            ( reset_type_variables(); end_def(); generalize _2 )
# 1303 "parser.ml"
               : 'valuedecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 234 "parser.mly"
            ( begin_def(); reset_type_variables() )
# 1309 "parser.ml"
               : 'colon_begin_scheme))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typeparams) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 240 "parser.mly"
                          ( (_2, {Core.arity = List.length _1}) )
# 1317 "parser.ml"
               : 'typedecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typeparams) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simpletype) in
    Obj.repr(
# 244 "parser.mly"
      ( reset_type_variables();
        (_2, {Core.arity = List.length _1}, {Core.params = _1; Core.defbody = _4}) )
# 1327 "parser.ml"
               : 'typedef))
; (fun __caml_parser_env ->
    Obj.repr(
# 248 "parser.mly"
                                ( [] )
# 1333 "parser.ml"
               : 'typeparams))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeparam) in
    Obj.repr(
# 249 "parser.mly"
                                ( [_1] )
# 1340 "parser.ml"
               : 'typeparams))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typeparamlist) in
    Obj.repr(
# 250 "parser.mly"
                                ( List.rev _2 )
# 1347 "parser.ml"
               : 'typeparams))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeparam) in
    Obj.repr(
# 253 "parser.mly"
                                    ( [_1] )
# 1354 "parser.ml"
               : 'typeparamlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeparamlist) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeparam) in
    Obj.repr(
# 254 "parser.mly"
                                    ( _3 :: _1 )
# 1362 "parser.ml"
               : 'typeparamlist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 257 "parser.mly"
              ( find_type_variable _2 )
# 1369 "parser.ml"
               : 'typeparam))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedef) in
    Obj.repr(
# 260 "parser.mly"
              ( let (id, kind, def) = _1 in
                (id, {Mod.kind = kind; Mod.manifest = Some def}))
# 1377 "parser.ml"
               : 'typeinfo))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedecl) in
    Obj.repr(
# 262 "parser.mly"
              ( let (id, kind) = _1 in
                (id, {Mod.kind = kind; Mod.manifest = None}) )
# 1385 "parser.ml"
               : 'typeinfo))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'path) in
    Obj.repr(
# 269 "parser.mly"
                                      ( Mod.Longident _1 )
# 1392 "parser.ml"
               : 'modulexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'structure) in
    Obj.repr(
# 270 "parser.mly"
                                      ( Mod.Structure(List.rev _2) )
# 1399 "parser.ml"
               : 'modulexpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'moduletype) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'modulexpr) in
    Obj.repr(
# 272 "parser.mly"
                                      ( Mod.FunM(Ident.create _3, _5, _8) )
# 1408 "parser.ml"
               : 'modulexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'modulexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'modulexpr) in
    Obj.repr(
# 273 "parser.mly"
                                      ( Mod.AppM(_1, _3) )
# 1416 "parser.ml"
               : 'modulexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'modulexpr) in
    Obj.repr(
# 274 "parser.mly"
                                      ( _2 )
# 1423 "parser.ml"
               : 'modulexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'modulexpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'moduletype) in
    Obj.repr(
# 275 "parser.mly"
                                      ( Mod.Constraint(_1, _3) )
# 1431 "parser.ml"
               : 'modulexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'modulexpr) in
    Obj.repr(
# 276 "parser.mly"
                                      ( Mod.CodM(_2) )
# 1438 "parser.ml"
               : 'modulexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'modulexpr) in
    Obj.repr(
# 277 "parser.mly"
                                      ( Mod.EscM(_2) )
# 1445 "parser.ml"
               : 'modulexpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'modulexpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'moduletype) in
    Obj.repr(
# 278 "parser.mly"
                                                  ( Mod.RunM(_3, _5) )
# 1453 "parser.ml"
               : 'modulexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'path) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 279 "parser.mly"
                                      ( Mod.DollarM(_1, _3) )
# 1461 "parser.ml"
               : 'modulexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'modulexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'modulexpr) in
    Obj.repr(
# 280 "parser.mly"
                                      ( Mod.RecAppM(_2, _3, _4) )
# 1470 "parser.ml"
               : 'modulexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 283 "parser.mly"
                                      ( [] )
# 1476 "parser.ml"
               : 'structure))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'structure) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'structure_item) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_semi) in
    Obj.repr(
# 284 "parser.mly"
                                      ( _2 :: _1 )
# 1485 "parser.ml"
               : 'structure))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'valbind) in
    Obj.repr(
# 287 "parser.mly"
                              ( Mod.LetM(Ident.create _2, _3) )
# 1493 "parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'valbind) in
    Obj.repr(
# 288 "parser.mly"
                                  ( Mod.LetRecM(Ident.create _3, _4) )
# 1501 "parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typedef) in
    Obj.repr(
# 289 "parser.mly"
                                  ( let (id, kind, def) = _2 in
                                    Mod.TypeM(Ident.create id, kind, def) )
# 1509 "parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'moduletype) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'modulexpr) in
    Obj.repr(
# 292 "parser.mly"
                     ( Mod.ModM(Ident.create _2, Mod.Constraint(_6, _4)) )
# 1518 "parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'modulexpr) in
    Obj.repr(
# 293 "parser.mly"
                                 ( Mod.ModM(Ident.create _2, _4) )
# 1526 "parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    Obj.repr(
# 296 "parser.mly"
                  ( () )
# 1532 "parser.ml"
               : 'opt_semi))
; (fun __caml_parser_env ->
    Obj.repr(
# 297 "parser.mly"
              ( () )
# 1538 "parser.ml"
               : 'opt_semi))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'path) in
    Obj.repr(
# 303 "parser.mly"
                                    ( Mod.LongidentS _1 )
# 1545 "parser.ml"
               : 'moduletype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'signature) in
    Obj.repr(
# 304 "parser.mly"
                                    ( Mod.Signature(List.rev _2) )
# 1552 "parser.ml"
               : 'moduletype))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'moduletype) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'moduletype) in
    Obj.repr(
# 306 "parser.mly"
                                    ( Mod.FunS(Ident.create _3, _5, _8) )
# 1561 "parser.ml"
               : 'moduletype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'moduletype) in
    Obj.repr(
# 307 "parser.mly"
                                    ( Mod.CodS(_1) )
# 1568 "parser.ml"
               : 'moduletype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'moduletype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'modconstraint) in
    Obj.repr(
# 308 "parser.mly"
                                    ( Mod.SharingS(_1, _3) )
# 1576 "parser.ml"
               : 'moduletype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'moduletype) in
    Obj.repr(
# 309 "parser.mly"
                                    ( _2 )
# 1583 "parser.ml"
               : 'moduletype))
; (fun __caml_parser_env ->
    Obj.repr(
# 312 "parser.mly"
                                      ( [] )
# 1589 "parser.ml"
               : 'signature))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'signature) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'signature_item) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_semi) in
    Obj.repr(
# 313 "parser.mly"
                                      ( _2 :: _1 )
# 1598 "parser.ml"
               : 'signature))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'valuedecl) in
    Obj.repr(
# 316 "parser.mly"
                                    ( Mod.ValS(Ident.create _2, _3) )
# 1606 "parser.ml"
               : 'signature_item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typeinfo) in
    Obj.repr(
# 317 "parser.mly"
                     ( let (id, def) = _2 in Mod.TypeS(Ident.create id, def) )
# 1613 "parser.ml"
               : 'signature_item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'moduletype) in
    Obj.repr(
# 318 "parser.mly"
                                    ( Mod.ModS(Ident.create _2, _4) )
# 1621 "parser.ml"
               : 'signature_item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typedef) in
    Obj.repr(
# 321 "parser.mly"
                  ( let (id, _, def) = _2 in Mod.TypeC(Ident.create id, def) )
# 1628 "parser.ml"
               : 'modconstraint))
; (fun __caml_parser_env ->
    Obj.repr(
# 327 "parser.mly"
                                        ( [] )
# 1634 "parser.ml"
               : 'toplevel_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'toplevel_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'toplevel) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_semisemi) in
    Obj.repr(
# 328 "parser.mly"
                                        ( _2 :: _1)
# 1643 "parser.ml"
               : 'toplevel_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 331 "parser.mly"
             ( () )
# 1649 "parser.ml"
               : 'opt_semisemi))
; (fun __caml_parser_env ->
    Obj.repr(
# 332 "parser.mly"
             ( () )
# 1655 "parser.ml"
               : 'opt_semisemi))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'moduletype) in
    Obj.repr(
# 335 "parser.mly"
                                      ( Mod.SignatureDec(Ident.create _3, _5))
# 1663 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'moduletype) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'modulexpr) in
    Obj.repr(
# 337 "parser.mly"
                    ( Mod.StructureDec(Ident.create _2, Mod.Constraint(_6, _4)) )
# 1672 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'modulexpr) in
    Obj.repr(
# 338 "parser.mly"
                                      ( Mod.StructureDec(Ident.create _2, _4) )
# 1680 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'valbind) in
    Obj.repr(
# 339 "parser.mly"
                                      ( Mod.LetDec(Ident.create _2, _3) )
# 1688 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'valbind) in
    Obj.repr(
# 340 "parser.mly"
                                      ( Mod.LetRecDec(Ident.create _3, _4) )
# 1696 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typedef) in
    Obj.repr(
# 341 "parser.mly"
                                      ( let (id, kind, def) = _2 in
                                          Mod.TypeDec(Ident.create id, kind, def) )
# 1704 "parser.ml"
               : 'toplevel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'structure_item) in
    Obj.repr(
# 345 "parser.mly"
                                      ( _1 )
# 1711 "parser.ml"
               : Source.Syntax.Mod.definition))
; (fun __caml_parser_env ->
    Obj.repr(
# 346 "parser.mly"
                                      ( raise End_of_file )
# 1717 "parser.ml"
               : Source.Syntax.Mod.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'toplevel_list) in
    Obj.repr(
# 350 "parser.mly"
                      ( List.rev _1 )
# 1724 "parser.ml"
               : Source.Syntax.Mod.toplevel list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'modulexpr) in
    Obj.repr(
# 356 "parser.mly"
                                      ( _1 )
# 1731 "parser.ml"
               : Source.Syntax.Mod.mod_term))
(* Entry implementation *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry phrase *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let implementation (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Source.Syntax.Mod.mod_term)
let phrase (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Source.Syntax.Mod.definition)
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Source.Syntax.Mod.toplevel list)
